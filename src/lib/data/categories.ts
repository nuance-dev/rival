import { Category } from "@/types/models";
import { Code, Layout, FileText, PenTool, BrainCircuit, Image, MessageSquare, Lightbulb } from "lucide-react";

export const categories: Category[] = [
  {
    id: "web-design",
    name: "Web Design",
    description: "Interactive websites, landing pages, and web applications designed by AI models.",
    color: "#3B82F6",
    icon: "Layout"
  },
  {
    id: "code-generation",
    name: "Code",
    description: "Programming solutions and implementations across various languages and frameworks.",
    color: "#10B981",
    icon: "Code"
  },
  {
    id: "image-generation",
    name: "Images",
    description: "Visual content including digital art, realistic renders, and creative graphics.",
    color: "#8B5CF6",
    icon: "Image"
  },
  {
    id: "text-analysis",
    name: "Text Analysis",
    description: "Comprehensive text processing, summarization, and analytical capabilities.",
    color: "#F97316",
    icon: "FileText"
  },
  {
    id: "reasoning",
    name: "Reasoning",
    description: "Complex problem-solving and logical reasoning capabilities demonstrated by AI.",
    color: "#EC4899",
    icon: "BrainCircuit"
  },
  {
    id: "creative",
    name: "Creative",
    description: "Stories, poems, scripts and other creative writing generated by AI models.",
    color: "#14B8A6",
    icon: "PenTool"
  },
  {
    id: "conversation",
    name: "Conversation",
    description: "Natural dialogue and conversational abilities",
    color: "#0ea5e9",
    icon: "MessageSquare"
  },
  {
    id: "innovative",
    name: "Innovative",
    description: "Novel, unexpected, or particularly impressive outputs",
    color: "#d97706",
    icon: "Lightbulb"
  }
];

export const getIconForCategory = (categoryId: string) => {
  const category = categories.find(cat => cat.id === categoryId);
  if (!category || !category.icon) return null;
  
  switch (category.icon) {
    case "Code":
      return Code;
    case "Layout":
      return Layout;
    case "FileText":
      return FileText;
    case "PenTool":
      return PenTool;
    case "BrainCircuit":
      return BrainCircuit;
    case "Image":
      return Image;
    case "MessageSquare":
      return MessageSquare;
    case "Lightbulb":
      return Lightbulb;
    default:
      return null;
  }
};

// Helper function to get category by ID
export const getCategoryById = (categoryId: string): Category | undefined => {
  return categories.find(category => category.id === categoryId);
};

// Helper function to get multiple categories by IDs
export const getCategoriesByIds = (categoryIds: string[]): Category[] => {
  return categories.filter(category => categoryIds.includes(category.id));
}; 