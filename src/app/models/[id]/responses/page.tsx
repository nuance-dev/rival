import React from "react";
import { notFound } from "next/navigation";
import Link from "next/link";
import { ArrowLeft } from "lucide-react";
import { Layout } from "@/components/layout/Layout";
import { models } from "@/lib/data";
import { getResponsesByModelId } from "@/lib/model-responses";

export const generateMetadata = async ({ params }: { params: Promise<{ id: string }> }) => {
  const { id } = await params;
  const model = models.find((m) => m.id === id);
  
  if (!model) {
    return {
      title: "Model Not Found | Rival",
      description: "The requested AI model could not be found.",
    };
  }
  
  return {
    title: `${model.name} Responses | Rival`,
    description: `Browse all responses and outputs from ${model.name} in the Rival AI Showcase.`,
  };
};

export default async function ModelResponsesPage(props: { params: Promise<{ id: string }> }) {
  const params = await props.params;
  const modelId = params.id;
  const model = models.find((m) => m.id === modelId);
  
  if (!model) {
    notFound();
  }
  
  // Get all responses for this model
  const modelResponses = getResponsesByModelId(modelId);
  
  // Group responses by type for better organization
  const responsesByType = modelResponses.reduce((acc, response) => {
    const type = response.type;
    if (!acc[type]) {
      acc[type] = [];
    }
    acc[type].push(response);
    return acc;
  }, {} as Record<string, typeof modelResponses>);
  
  // Sort responses by date (newest first)
  Object.values(responsesByType).forEach(responses => {
    responses.sort((a, b) => 
      new Date(b.responseDate).getTime() - new Date(a.responseDate).getTime()
    );
  });
  
  // Order of response types for display
  const typeOrder = ["website", "code", "svg", "text", "image", "html"];
  
  return (
    <Layout>
      <div className="container py-12">
        <div className="mb-8">
          <Link 
            href={`/models/${modelId}`}
            className="inline-flex items-center text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to {model.name}
          </Link>
          
          <h1 className="text-4xl font-display mt-6 mb-4">{model.name} Responses</h1>
          <p className="text-muted-foreground max-w-3xl">
            Browse all the responses generated by {model.name}, showcasing various capabilities
            across different types of content.
          </p>
        </div>
        
        {Object.keys(responsesByType).length > 0 ? (
          // Display responses grouped by type
          typeOrder.filter(type => responsesByType[type]).map(type => (
            <div key={type} className="mb-16">
              <h2 className="text-2xl font-display mb-6 capitalize">
                {type === "html" ? "HTML" : type} Responses
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {responsesByType[type].map(response => (
                  <Link 
                    key={response.id}
                    href={`/models/${modelId}/responses/${response.id}`}
                    className="bg-card border border-border rounded-xl p-5 hover:shadow-md transition-shadow h-full flex flex-col"
                  >
                    <div className="inline-flex px-2 py-1 rounded-full text-xs bg-muted mb-3 self-start">
                      {new Date(response.responseDate).toLocaleDateString()}
                    </div>
                    <h3 className="text-xl font-medium mb-2 line-clamp-1">{response.title}</h3>
                    <p className="text-muted-foreground text-sm mb-4 flex-grow line-clamp-3">
                      {response.description}
                    </p>
                    <div className="mt-auto pt-3 text-sm border-t border-border flex justify-end">
                      <span className="text-primary">View Details â†’</span>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          ))
        ) : (
          <div className="py-12 text-center text-muted-foreground">
            <p>No responses available for {model.name} yet.</p>
          </div>
        )}
      </div>
    </Layout>
  );
} 